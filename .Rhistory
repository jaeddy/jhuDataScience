View(training)
ggplot(training, aes(x = Superplasticizer)) +
geom_histogram()
ggplot(training, aes(x = log(Superplasticizer + 1)) +
geom_histogram()
summary(training$Superplasticizer)
summary(training$Superplasticizer)
ggplot(training, aes(x = log(Superplasticizer + 1)) +
geom_histogram()
d
ggplot(training, aes(x = log(Superplasticizer + 1))) +
geom_histogram()
ggplot(training, aes(x = log(Superplasticizer))) +
geom_histogram()
library(AppliedPredictiveModeling)
library(caret)
library(Hmisc)
library(reshape2)
library(dplyr)
data(AlzheimerDisease)
data(concrete)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain, ]
testing = mixtures[-inTrain, ]
mixtures$idx <- row.names(mixtures)
cutVec <- Vectorize(cut2)
concreteMelt <- concrete %>%
melt(id.vars = c("idx", "CompressiveStrength"),
measure.vars = c("Cement", "BlastFurnaceSlag", "FlyAsh", "Water",
"Superplasticizer", "CoarseAggregate",
"FineAggregate", "Age")) %>%
group_by(variable) %>%
mutate(valueFactor = cut2(value))
concreteMelt <- mixtures %>%
melt(id.vars = c("idx", "CompressiveStrength"),
measure.vars = c("Cement", "BlastFurnaceSlag", "FlyAsh", "Water",
"Superplasticizer", "CoarseAggregate",
"FineAggregate", "Age")) %>%
group_by(variable) %>%
mutate(valueFactor = cut2(value))
ggplot(concreteMelt, aes(x = idx, y = CompressiveStrength)) +
geom_point(aes(colour = valueFactor)) +
facet_wrap( ~ variable)
plot(training$CompressiveStrength,pch=1,col=cut2(training$FlyAsh,m=20))
plot(training$CompressiveStrength,pch=1,col=cut2(training$Age,m=20))
plot(training$CompressiveStrength,pch=1,col=cut2(training$Cement,m=20))
plot(mixtures$CompressiveStrength,pch=1,col=cut2(mixtures$FlyAsh,m=20))
training$idx <- row.names(mixtures)
training$idx <- row.names(training)
concreteMelt <- training %>%
melt(id.vars = c("idx", "CompressiveStrength"),
measure.vars = c("Cement", "BlastFurnaceSlag", "FlyAsh", "Water",
"Superplasticizer", "CoarseAggregate",
"FineAggregate", "Age")) %>%
group_by(variable) %>%
mutate(valueFactor = cut2(value))
ggplot(concreteMelt, aes(x = idx, y = CompressiveStrength)) +
geom_point(aes(colour = valueFactor)) +
facet_wrap( ~ variable)
plot(training$CompressiveStrength,pch=1,col=cut2(training$FlyAsh,m=20))
ggplot(concreteMelt, aes(x = idx, y = CompressiveStrength)) +
geom_point(aes(colour = valueFactor)) +
facet_wrap( ~ variable)
View(training)
ggplot(concreteMelt, aes(y = CompressiveStrength)) +
geom_point(aes(colour = valueFactor)) +
facet_wrap( ~ variable)
ggplot(training, aes(y = CompressiveStrength)) +
geom_point()
ggplot(training, aes(x = idx, y = CompressiveStrength)) +
geom_point()
plot(training$CompressiveStrength,pch=1,col=cut2(training$FlyAsh,m=20))
max(training$idx)
training$idx <- 1:length(training)
training$idx <- 1:nrows(training)
training$idx <- 1:nrow(training)
ggplot(training, aes(x = idx, y = CompressiveStrength)) +
geom_point()
concreteMelt <- training %>%
melt(id.vars = c("idx", "CompressiveStrength"),
measure.vars = c("Cement", "BlastFurnaceSlag", "FlyAsh", "Water",
"Superplasticizer", "CoarseAggregate",
"FineAggregate", "Age")) %>%
group_by(variable) %>%
mutate(valueFactor = cut2(value))
ggplot(concreteMelt, aes(y = CompressiveStrength)) +
geom_point(aes(colour = valueFactor)) +
facet_wrap( ~ variable)
ggplot(concreteMelt, aes(x = idx, y = CompressiveStrength)) +
geom_point(aes(colour = valueFactor)) +
facet_wrap( ~ variable)
plot(training$CompressiveStrength,pch=1,col=cut2(training$FlyAsh,m=20))
plot(training$CompressiveStrength,pch=1,col=cut2(training$Age,m=20))
plot(training$CompressiveStrength,pch=1,col=cut2(training$Cement,m=20))
str(training)
trainMelt <- training %>%
melt(id.vars = c("idx", "CompressiveStrength"),
measure.vars = c("Cement", "BlastFurnaceSlag", "FlyAsh", "Water",
"Superplasticizer", "CoarseAggregate",
"FineAggregate", "Age")) %>%
group_by(variable) %>%
mutate(valueFactor = cut2(value, m = 20))
tail(trainMelt)
str(trainMelt)
ggplot(trainMelt, aes(x = idx, y = CompressiveStrength)) +
geom_point(aes(colour = cut2(value, m = 20)) +
facet_wrap( ~ variable)
plot(training$CompressiveStrength,pch=1,col=cut2(training$FlyAsh,m=20))
ggplot(trainMelt, aes(x = idx, y = CompressiveStrength)) +
geom_point(aes(colour = cut2(value, m = 20))) +
facet_wrap( ~ variable)
sample(trainMelt$valueFactor, size = 10)
unlevel(sample(trainMelt$valueFactor, size = 10))
levels(sample(trainMelt$valueFactor, size = 10))
x <- 1:10
xcut <- cut2(x, m = 3)
xcut
xcut <- cut2(x, m = 3, onlycuts = TRUE)
xcut
xcut <- cut(x, m = 3)
xcut <- cut2(x, m = 3)
xcut <- cut2(x, g = 10)
xcut <- cut2(x, g = 3)
xcut
levels(xcut)
xcut[1] %in% levels(xcut)
levels(xcut) %in% xcut[1]
grep(xcut[1], levels(xcut))
match(xcut[1], levels(xcut))
match(xcut[5], levels(xcut))
sapply(xcut, function(x) {match(x, levels(xcut))})
cut2tiers <- function(x, m) {
xcut <- cut2(x, m)
sapply(xcut, function(xc) { match(xc, levels(xcut)) })
}
trainMelt <- training %>%
melt(id.vars = c("idx", "CompressiveStrength"),
measure.vars = c("Cement", "BlastFurnaceSlag", "FlyAsh", "Water",
"Superplasticizer", "CoarseAggregate",
"FineAggregate", "Age")) %>%
group_by(variable) %>%
mutate(valueFactor = cut2tiers(value, m = 20))
tail(trainMelt)
head(trainMelt)
ggplot(trainMelt, aes(x = idx, y = CompressiveStrength)) +
geom_point(aes(colour = cut2(value, m = 20))) +
facet_wrap( ~ variable)
ggplot(trainMelt, aes(x = idx, y = CompressiveStrength)) +
geom_point(aes(colour = valueFactor)) +
facet_wrap( ~ variable)
sapply(xcut, function(xc) { match(xc, levels(xcut)) })
str(trainMelt)
unique(valueFactor)
unique(training$valueFactor)
unique(trainMelt$valueFactor)
cut2tiers <- Vectorize(cut2tiers)
trainMelt <- training %>%
melt(id.vars = c("idx", "CompressiveStrength"),
measure.vars = c("Cement", "BlastFurnaceSlag", "FlyAsh", "Water",
"Superplasticizer", "CoarseAggregate",
"FineAggregate", "Age")) %>%
group_by(variable) %>%
mutate(valueFactor = cut2tiers(value, m = 20))
tail(trainMelt)
unique(trainMelt$valueFactor)
plot(training$CompressiveStrength,pch=1,col=cut2(training$FlyAsh,m=20))
plot(training$CompressiveStrength,pch=1,col=cut2(training$BlastFurnaceSlag,m=20))
plot(training$CompressiveStrength,pch=1,col=cut2(training$Water,m=20))
plot(training$CompressiveStrength,pch=1,col=cut2(training$Superplasticizer,m=20))
plot(training$CompressiveStrength,pch=1,col=cut2(training$CoarseAggregate,m=20))
plot(training$CompressiveStrength,pch=1,col=cut2(training$FineAggregate,m=20))
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
str(training)
trainIL <- training %>%
select(contains("IL"))
View(trainIL)
trainIL <- training %>%
select(starts_with("IL"))
View(trainIL)
preProc <- preProcess(trainIL, method = "pca", thresh = 80)
preProc
preProc <- preProcess(trainIL, method = "pca", thresh = .8)
preProc
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
trainIL <- training %>%
select(starts_with("IL"))
str(test)
str(testing)
model1 <- train(diagnosis ~ ., method = "glm", data = trainIL)
trainIL <- training %>%
select(starts_with("IL"), matches("diagnosis"))
View(trainIL)
model1 <- train(diagnosis ~ ., method = "glm", data = trainIL)
install.packages("e1071")
model1 <- train(diagnosis ~ ., method = "glm", data = trainIL)
confusionMatrix(type, data = predict(model1, testing))
pred <- predict(model1, data = testing)
pred <- predict(model1, newdata = testing)
pred
confusionMatrix(data = pred, reference = testing$diagnosis)
preProc <- preProcess(trainIL, method = "pca", thresh = .8)
preProc <- preProcess(trainIL %>% select(-diagnosis),
method = "pca", thresh = .8)
trainPC <- predict(preProc, trainIL %>% select(-diagnosis))
model2 <- train(trainIL$diagnosis ~ ., method = "glm", data = trainPC)
testIL <- testing %>%
select(starts_with("IL"), matches("diagnosis"))
testPC <- predict(preProc, testIL %>% select(-diagnosis))
pred <- predict(model2 <- newdata = testPC)
pred <- predict(model2, newdata = testPC)
confusionMatrix(data = pred, reference = testIL$diagnosis)
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50, list = FALSE)
training = adData[trainIndex, ]
testing = adData[-trainIndex, ]
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
ggplot(training, aes(x = log(Superplasticizer))) +
geom_histogram()
min(training$Superplasticizer)
log(min(training$Superplasticizer))
ggplot(training, aes(x = log(Superplasticizer+1))) +
geom_histogram()
ggplot(training, aes(x = Superplasticizer)) +
geom_histogram()
ggplot(training, aes(x = log(Superplasticizer+1))) +
geom_histogram()
ggplot(training, aes(x = Superplasticizer)) +
geom_histogram()
ggplot(training, aes(x = log(Superplasticizer+1))) +
geom_histogram()
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
inTraining <- createDataPartition(segmentationOriginal$Case, p = 0.7)[[1]]
training <- segmentationOriginal[, inTraining]
training <- segmentationOriginal[inTraining, ]
testing <- segmentationOriginal[-inTraining, ]
set.seed(125)
cartModel <- train(Case ~ ., method = "rpart", data = training)
cartModel
summary(cartModel)
cartModel$finalModel
newSamples <- data.frame(TotalIntench2 = c(23000, 50000, 57000, NA),
FiberWidthCh1 = c(10, 10, 8, 8),
PerimStatusCh1 = c(2, NA, NA, 2),
VarIntenCh4 = c(NA, 100, 100, 100))
View(newSamples)
pred <- predict(cartModel, newdata = newSamples)
str(training)
library(dplyr)
str(segmentationOriginal$Case)
training <- segmentationOriginal %>%
filter(Case == "Train")
testing <- segmentationOriginal %>%
filter(Case == "Test")
set.seed(125)
cartModel <- train(Class ~ ., method = "rpart", data = training)
cartModel$finalModel
pred <- predict(cartModel, newdata = newSamples)
str(segmentationOriginal$Class)
install.packages("pgmm")
packrat::snapshot(prompt = FALSE)
packrat::restore(prompt = FALSE)
library(pgmm)
data(olive)
olive = olive[,-1]
str(olive)
cartModel <- train(Area ~ ., method = "rpart", data = olive)
pred <- predict(cartModel, newdata = as.data.frame(t(colMeans(olive)))
pred <- predict(cartModel, newdata = as.data.frame(t(colMeans(olive))))
pred <- predict(cartModel, newdata = as.data.frame(t(colMeans(olive))))
pred
as.data.frame(t(colMeans(olive)))
cartModel$finalModel
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
str(trainSA)
?SAheart
glmModel <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl,
method = "glm", data = trainSA)
glmModel <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl,
method = "glm", family = "binomial", data = trainSA)
trainPred <- predict(glmModel, type = "response", newdata = trainSA)
trainPred <- predict(glmModel, scale = "response", newdata = trainSA)
trainPred <- predict(glmModel, method = "response", newdata = trainSA)
trainPred <- predict(glmModel, type = "response", newdata = trainSA)
glmModel <- glm(chd ~ age + alcohol + obesity + tobacco + typea + ldl,
family = "binomial", data = trainSA)
trainPred <- predict.glm(glmModel, type = "response", newdata = trainSA)
testPred <- predict.glm(glmModel, type = "response", newdata = testSA)
missClass = function(values,prediction){
sum(((prediction > 0.5)*1) != values) / length(values)
}
missClass(trainSA$chd, trainPred)
missClass(testSA$chd, testPred)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
str(vowel.train)
vowel.train <- vowel.train %>%
mutate(y = as.factor(y))
vowel.test <- vowel.test %>%
mutate(y = as.factor(y))
rfModel <- randomForest(y ~ ., method = "rf", data = vowel.train,
importance = TRUE)
rfModel <- train(y ~ ., method = "rf", data = vowel.train,
importance = TRUE)
varImp(rfModel)
rfModel <- train(y ~ ., method = "rf", data = vowel.train)
set.seed(33833)
rfModel <- train(y ~ ., method = "rf", data = vowel.train)
varImp(rfModel)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.train <- vowel.train %>%
mutate(y = as.factor(y))
library(dplyr)
vowel.train <- vowel.train %>%
mutate(y = as.factor(y))
vowel.test <- vowel.test %>%
mutate(y = as.factor(y))
set.seed(33833)
rfModel <- train(y ~ ., method = "rf", data = vowel.train)
library(caret)
rfModel <- train(y ~ ., method = "rf", data = vowel.train)
gbmModel <- train(y ~ ., method = "gbm", data = vowel.train)
library(ElemStatLearn)
library(dplyr)
library(caret)
data(vowel.train)
data(vowel.test)
vowel.train <- vowel.train %>%
mutate(y = as.factor(y))
vowel.test <- vowel.test %>%
mutate(y = as.factor(y))
set.seed(33833)
rfModel <- train(y ~ ., method = "rf", data = vowel.train)
gbmModel <- train(y ~ ., method = "gbm", data = vowel.train)
rfPred <- predict(rfModel, newdata = vowel.test)
gbmPred <- predict(gbmModel, newdata = vowel.test)
mean(rfPred == vowel.test$y)
mean(gbmPred == vowel.test$y)
agreePred <- rfPred == gbmPred
mean(rfPred[agreePred] == vowel.test$y[agreePred])
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(62433)
rfModel <- train(diagnosis ~ ., method = "rf", data = training)
gbmModel <- train(diagnosis ~ ., method = "gbm", data = training)
set.seed(62433)
gbmModel <- train(diagnosis ~ ., method = "gbm", data = training,
verbose = FALSE)
ldaModel <- train(diagnosis ~ ., method = "lda", data = training)
rfPred <- predict(rfModel, newdata = testing)
gbmPred <- predict(gbmModel, newdata = testing)
ldaPred <- predict(ldaModel, newdata = testing)
predDF <- data.frame(rfPred, gbmPred, ldaPred, diagnosis = testing$diagnosis)
combModel <- train(diagnosis ~ ., method = "rf", data = predDF)
View(predDF)
combPred <- predict(combModel, newdata = testing)
mean(combPred == testing$diagnosis)
mean(rfPred == testing$diagnosis)
mean(gbmPred == testing$diagnosis)
mean(ldaPred == testing$diagnosis)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(233)
lassoModel <- train(CompressiveStrength ~ ., method = "lasso", data = training)
?plot.enet
plot.enet(lassoModel)
x <- training %>%
select(-CompressiveStrength)
x <- training %>%
select(-CompressiveStrength)
x <- training %>%
select(CompressiveStrength)
?select
View(training)
library(dplyr)
x <- training %>%
select(CompressiveStrength)
select(-CompressiveStrength)
x <- training %>%
select(., -CompressiveStrength)
select(training, CompressiveStrength)
data(iris)
select(iris, Pedal.Length)
x <- training %>%
select(matches("CompressiveStrength"))
x <- training %>%
select()
environment
stack
x <- training %>%
dplyr::select(CompressiveStrength)
x <- training %>%
dplyr::select(-CompressiveStrength)
View(x)
y <- training %>%
dplyr::select(CompressiveStrength)
lassoModel <- enet(x = x, y = y)
x <- training %>%
dplyr::select(-CompressiveStrength) %>%
as.matrix()
y <- training %>%
dplyr::select(CompressiveStrength) %>%
as.matrix()
lassoModel <- enet(x = x, y = y)
plot.enet(lassoModel)
lassoModel <- train(CompressiveStrength ~ ., method = "lasso", data = training)
plot.enet(lassoModel$finalModel)
plot.enet(lassoModel$finalModel)
dev.off()
plot.enet(lassoModel$finalModel)
plot.enet(lassoModel$finalModel, xvar = "penalty")
fileAddress <- "https://d396qusza40orc.cloudfront.net/predmachlearn/gaData.csv"
dir.create("data")
download.file(fileAddress, "data/gaData.csv", method = "curl")
library(lubridate)  # For year() function below
install.packages("lubridate")
library(lubridate)  # For year() function below
dat = read.csv("data/gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
library(forecast)
install.packages("forecast")
library(forecast)
batsModel <- bats(training)
batsModel <- bats(tstrain)
batsModel
batsPred <- predict(batsModel, testing)
batsModel$fitted.values
?bats
batsPred <- forecast(batsModel, testing)
batsPred <- forecast(batsModel)
batsPred$upper
plot(batsPred)
View(testing)
batsPred <- forecast(batsModel, newdata = ts(testing$visitsTumblr))
plot(batsPred)
ts(testing$visitsTumblr)
ts(testing$visitsTumblr) > batsPred$lower
batsPred$lower
batsPred <- forecast(batsModel, newdata = testing$date)
ts(testing$visitsTumblr) > batsPred$lower
batsPred <- forecast(batsModel, newdata = ts(testing$date))
batsPred <- forecast(batsModel)
plot(batsPred); lines(ts(testing$visitsTumblr), col = "red")
batsPred <- forecast(batsModel, PI = TRUE)
plot(batsPred); lines(ts(testing$visitsTumblr), col = "red")
batsPred <- forecast(batsModel, h = length(ts(testing$date)))
plot(batsPred); lines(ts(testing$visitsTumblr), col = "red")
batsPred$upper
batsPred$level
ts(testing$visitsTumblr) > batsPred$lower[, 2]
sum(ts(testing$visitsTumblr) > batsPred$lower[, 2] &
ts(testing$visitsTumblr) < batsPred$upper[, 2])
226/235
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(325)
library(e1071)
dplyr::select(-CompressiveStrength)
x <- training %>%
dplyr::select(-CompressiveStrength)
y <- training %>%
dplyr::select(CompressiveStrength)
svmModel <- svm(x = x, y = y)
svmPred <- predict(svmModel, newdata = testing)
?svm
svmModel
svmPred <- predict(svmModel, x)
svmPred <- predict(svmModel, testing)
svmPred <- predict(svmModel, testing %>% dplyr::select(-CompressiveStrength))
svmPred
rmse <- sqrt(mean(svmPred - testing$CompressiveStrength)^2, na.rm = TRUE)
rmse <- sqrt(mean((svmPred - testing$CompressiveStrength)^2, na.rm = TRUE))

ggtitle("Global Active Power")
p
ggplotly(p)
# Make plot 2
with(powerDat, {
plot(datetime, Global_active_power,
type = "n",
ylab = "Global Active Power (kilowatts)",
xlab = "")
lines(datetime, Global_active_power)
})
dev.of()
dev.off()
# Make plot 2
with(powerDat, {
plot(datetime, Global_active_power,
type = "n",
ylab = "Global Active Power (kilowatts)",
xlab = "")
lines(datetime, Global_active_power)
})
powerDat %>%
plot_ly(x = Global_active_power,
type = "histogram", autobinx = FALSE,
xbins = list(start = 0, end = 8.5, size = 0.5)) %>%
layout(title = "Global Active Power",
xaxis = list(title = "Global Active Power (kilowatts)"),
yaxis = list(title = "Frequency"))
# Make plot 2
with(powerDat, {
plot(datetime, Global_active_power,
type = "n",
ylab = "Global Active Power (kilowatts)",
xlab = "")
lines(datetime, Global_active_power)
})
powerDat %>%
plotly(x = datetime, y = Global_active_power)
powerDat %>%
plot_ly(x = datetime, y = Global_active_power)
powerDat %>%
ggplot(aes(x = datetime, y = Global_active_power)) +
geom_line()
p <- powerDat %>%
ggplot(aes(x = datetime, y = Global_active_power)) +
geom_line()
p
ggplotly(p)
library(dplyr)
library(ggplot2)
library(lubridate)
library(plotly)
# Create a directory to store data, if one doesn't already exist
if (!file.exists("data/")) {
dir.create("data/")
}
# Download the data from the web and record the date and time
if (!file.exists("data/household_power_consumption.zip")) {
fileAddress <- paste0("https://d396qusza40orc.cloudfront.net/",
"exdata%2Fdata%2Fhousehold_power_consumption.zip")
download.file(fileAddress, "data/household_power_consumption.zip",
method = "curl")
dateDownloaded <- date()
file.create("data/dateDownloaded.txt")
con <- file("data/dateDownloaded.txt")
writeChar(dateDownloaded, con)
}
# Unzip the data file
if (!file.exists("data/household_power_consumption.txt")) {
unzip(zipfile = "data/household_power_consumption.zip", exdir = "data/")
}
setwd("exploratoryDataAnalysis/")
library(dplyr)
library(ggplot2)
library(lubridate)
library(plotly)
# Create a directory to store data, if one doesn't already exist
if (!file.exists("data/")) {
dir.create("data/")
}
# Download the data from the web and record the date and time
if (!file.exists("data/household_power_consumption.zip")) {
fileAddress <- paste0("https://d396qusza40orc.cloudfront.net/",
"exdata%2Fdata%2Fhousehold_power_consumption.zip")
download.file(fileAddress, "data/household_power_consumption.zip",
method = "curl")
dateDownloaded <- date()
file.create("data/dateDownloaded.txt")
con <- file("data/dateDownloaded.txt")
writeChar(dateDownloaded, con)
}
# Unzip the data file
if (!file.exists("data/household_power_consumption.txt")) {
unzip(zipfile = "data/household_power_consumption.zip", exdir = "data/")
}
# Preview the data using readLines() and the lubridate package to identify rows
# corresponding to the target range of dates (1/2/2007 to 2/2/2007)
# Note: the assignment description states that dates are found in the first
# column and formatted as "dd/mm/yyyy", but this can also be confirmed by
# reading and visually inspecting the first several lines
con <- file("data/household_power_consumption.txt")
for (n in seq(10000, 200000, 10000)) {
lines <- readLines(con, n)
lineParts <- strsplit(tail(lines, 1), ";")
lineDate <- dmy(unlist(lineParts)[1])
if (lineDate > dmy("2/2/2007")) {
break
}
}
startLine <- min(grep("1/2/2007", lines))
endLine <- max(grep("2/2/2007", lines))
close(con)
# Load the data only up to the end of the desired range
powerDat <- read.table("data/household_power_consumption.txt",
nrows = endLine, sep = ";", header = TRUE,
na.strings = c("?"))
str(powerDat)
# Subset the data to only include the target date range
powerDat <- powerDat[(startLine-1):endLine, ]
# Convert the Date and Time variables into a new Date/Time class variable using
# lubridate and dplyr
powerDat <- mutate(powerDat, datetime = dmy_hms(paste(Date, Time)))
# Make plot 1
with(powerDat, hist(Global_active_power, col = "red",
xlab = "Global Active Power (kilowatts)",
main = "Global Active Power"))
powerDat %>%
plot_ly(x = Global_active_power,
type = "histogram", autobinx = FALSE,
xbins = list(start = 0, end = 8.5, size = 0.5)) %>%
layout(title = "Global Active Power",
xaxis = list(title = "Global Active Power (kilowatts)"),
yaxis = list(title = "Frequency"))
p <- powerDat %>%
ggplot(aes(x = Global_active_power)) +
geom_histogram(binwidth = 0.5) +
xlab("Global Active Power (kilowatts)") +
ylab("Frequency") +
ggtitle("Global Active Power")
p
ggplotly(p)
# Make plot 2
with(powerDat, {
plot(datetime, Global_active_power,
type = "n",
ylab = "Global Active Power (kilowatts)",
xlab = "")
lines(datetime, Global_active_power)
})
powerDat %>%
plot_ly(x = datetime, y = Global_active_power)
p <- powerDat %>%
ggplot(aes(x = datetime, y = Global_active_power)) +
geom_line()
p
ggplotly(p)
?ggplotly
# Make plot 1
with(powerDat, hist(Global_active_power, col = "red",
xlab = "Global Active Power (kilowatts)",
main = "Global Active Power"))
powerDat %>%
plot_ly(x = Global_active_power,
type = "histogram", autobinx = FALSE,
xbins = list(start = 0, end = 8.5, size = 0.5)) %>%
layout(title = "Global Active Power",
xaxis = list(title = "Global Active Power (kilowatts)"),
yaxis = list(title = "Frequency"))
powerDat %>%
plot_ly(x = Global_active_power,
type = "histogram", autobinx = FALSE,
xbins = list(start = 0, end = 8.5, size = 0.5)) %>%
layout(title = "Global Active Power",
xaxis = list(title = "Global Active Power (kilowatts)"),
yaxis = list(title = "Frequency"),
titlefont = list(family = "Arial"))
powerDat %>%
plot_ly(x = Global_active_power,
type = "histogram", autobinx = FALSE,
xbins = list(start = 0, end = 8.5, size = 0.5)) %>%
layout(title = "Global Active Power",
xaxis = list(title = "Global Active Power (kilowatts)"),
yaxis = list(title = "Frequency"),
titlefont = list(family = "Arial"),
tickfont = list(family = "Arial"))
powerDat %>%
plot_ly(x = Global_active_power,
type = "histogram", autobinx = FALSE,
xbins = list(start = 0, end = 8.5, size = 0.5)) %>%
layout(title = "Global Active Power",
xaxis = list(title = "Global Active Power (kilowatts)"),
yaxis = list(title = "Frequency"),
titlefont = list(family = "Arial"),
tickfont = list(family = "Arial",
size = 10))
powerDat %>%
plot_ly(x = Global_active_power,
type = "histogram", autobinx = FALSE,
xbins = list(start = 0, end = 8.5, size = 0.5)) %>%
layout(title = "Global Active Power",
xaxis = list(title = "Global Active Power (kilowatts)"),
yaxis = list(title = "Frequency"),
titlefont = list(family = "Arial"),
tickfont = list(family = "Arial",
size = 14))
powerDat %>%
plot_ly(x = Global_active_power,
type = "histogram", autobinx = FALSE,
xbins = list(start = 0, end = 8.5, size = 0.5)) %>%
layout(title = "Global Active Power",
xaxis = list(title = "Global Active Power (kilowatts)"),
yaxis = list(title = "Frequency"))
p <- powerDat %>%
ggplot(aes(x = Global_active_power)) +
geom_histogram(binwidth = 0.5) +
xlab("Global Active Power (kilowatts)") +
ylab("Frequency") +
ggtitle("Global Active Power")
p
ggplotly(p)
# Make plot 2
with(powerDat, {
plot(datetime, Global_active_power,
type = "n",
ylab = "Global Active Power (kilowatts)",
xlab = "")
lines(datetime, Global_active_power)
})
powerDat %>%
plot_ly(x = datetime, y = Global_active_power)
powerDat %>%
plot_ly(x = datetime, y = Global_active_power) %>%
layout(yaxis = list(title = "Global Active Power (kilowatts)"),
xaxis = list(title = ""))
powerDat %>%
plot_ly(x = datetime, y = Global_active_power) %>%
layout(yaxis = list(title = "Global Active Power (kilowatts)"),
xaxis = list(title = "",
nticks = 3))
View(powerDat)
p <- powerDat %>%
ggplot(aes(x = datetime, y = Global_active_power)) +
geom_line()
p
?scale_x_date
p <- powerDat %>%
ggplot(aes(x = datetime, y = Global_active_power)) +
geom_line() +
scale_x_date(date_breaks = "3 days")
p
?scale_x_continuous
p <- powerDat %>%
ggplot(aes(x = datetime, y = Global_active_power)) +
geom_line() +
scale_x_continuous(breaks = 1:3)
p
p <- powerDat %>%
ggplot(aes(x = datetime, y = Global_active_power)) +
geom_line() +
scale_x_discrete(breaks = 1:3)
p
p <- powerDat %>%
ggplot(aes(x = datetime, y = Global_active_power)) +
geom_line()
p
p <- powerDat %>%
ggplot(aes(x = datetime, y = Global_active_power)) +
geom_line() +
scale_x_continuous(breaks = c(1, 2, 3))
p
p <- powerDat %>%
ggplot(aes(x = datetime, y = Global_active_power)) +
geom_line()
p <- powerDat %>%
ggplot(aes(x = datetime, y = Global_active_power)) +
geom_line()
dev.off()
p <- powerDat %>%
ggplot(aes(x = datetime, y = Global_active_power)) +
geom_line()
p
p <- powerDat %>%
ggplot(aes(x = datetime, y = Global_active_power)) +
geom_line() +
xlab("")
p
str(powerDat)
p <- powerDat %>%
ggplot(aes(x = datetime, y = Global_active_power)) +
geom_line() +
xlab("") +
scale_x_datetime(date_breaks = "3 days")
p
?scale_x_datetime
p <- powerDat %>%
ggplot(aes(x = datetime, y = Global_active_power)) +
geom_line() +
xlab("") +
scale_x_datetime(date_minor_breaks = "3 days")
p
p <- powerDat %>%
ggplot(aes(x = datetime, y = Global_active_power)) +
geom_line() +
xlab("") +
scale_x_datetime(date_breaks = "3 days")
p
p <- powerDat %>%
ggplot(aes(x = datetime, y = Global_active_power)) +
geom_line() +
xlab("") +
scale_x_datetime(date_breaks = "3 days",
date_minor_breaks = "3 days")
p
p <- powerDat %>%
ggplot(aes(x = datetime, y = Global_active_power)) +
geom_line() +
xlab("") +
scale_x_datetime(date_breaks = "3 days",
date_labels = "%D")
p
p <- powerDat %>%
ggplot(aes(x = datetime, y = Global_active_power)) +
geom_line() +
xlab("") +
scale_x_datetime(breaks = 1:3,
date_breaks = "3 days",
date_labels = "%D")
p
p <- powerDat %>%
ggplot(aes(x = datetime, y = Global_active_power)) +
geom_line() +
xlab("") +
scale_x_datetime(breaks = 1:3,
date_labels = "%D")
p
p <- powerDat %>%
ggplot(aes(x = datetime, y = Global_active_power)) +
geom_line() +
xlab("") +
scale_x_datetime(date_breaks = "3 days",
date_labels = "%D")
p
p <- powerDat %>%
ggplot(aes(x = datetime, y = Global_active_power)) +
geom_line() +
xlab("") +
scale_x_datetime(date_breaks = "3 days",
date_labels = "%d")
p
p <- powerDat %>%
ggplot(aes(x = datetime, y = Global_active_power)) +
geom_line() +
xlab("") +
scale_x_datetime(date_breaks = "3 days",
date_labels = "%A")
p
?scale_x_datetime
p <- powerDat %>%
ggplot(aes(x = datetime, y = Global_active_power)) +
geom_line() +
xlab("") +
scale_x_datetime(date_breaks = "3 days",
date_minor_breaks = "1 day",
date_labels = "%A")
p
p <- powerDat %>%
ggplot(aes(x = datetime, y = Global_active_power)) +
geom_line() +
xlab("") +
scale_x_datetime(breaks = (date_breaks = "3 days"),
date_labels = "%A"))
p
p <- powerDat %>%
ggplot(aes(x = datetime, y = Global_active_power)) +
geom_line() +
xlab("") +
scale_x_datetime(breaks = date_breaks("3 days"),
date_labels = "%A"))
p
p <- powerDat %>%
ggplot(aes(x = datetime, y = Global_active_power)) +
geom_line() +
xlab("") +
scale_x_datetime(breaks = date_breaks("3 days"),
date_labels = "%A")
p
p <- powerDat %>%
ggplot(aes(x = datetime, y = Global_active_power)) +
geom_line() +
xlab("") +
scale_x_datetime(date_breaks = "3 day",
date_labels = "%A")
p
p <- powerDat %>%
ggplot(aes(x = datetime, y = Global_active_power)) +
geom_line() +
xlab("") +
scale_x_datetime(date_breaks = "3 day",
date_minor_breaks = "1 day"
date_labels = "%A")
p
p <- powerDat %>%
ggplot(aes(x = datetime, y = Global_active_power)) +
geom_line() +
xlab("") +
scale_x_datetime(date_breaks = "3 day",
date_minor_breaks = "1 day",
date_labels = "%A")
p
powerDat$datetime[1]
powerDat$datetime[length(powerDat$datetime)]
lims <- c(powerDat$datetime[1], powerDat$datetime[length(powerDat$datetime)])
p <- powerDat %>%
ggplot(aes(x = datetime, y = Global_active_power)) +
geom_line() +
xlab("") +
scale_x_datetime(limits = lims,
date_breaks = "3 day",
date_minor_breaks = "1 day",
date_labels = "%A")
p
lims <- c(powerDat$datetime[1], powerDat$datetime[length(powerDat$datetime)])
p <- powerDat %>%
ggplot(aes(x = datetime, y = Global_active_power)) +
geom_line() +
xlab("") +
scale_x_datetime(date_breaks = "3 day",
date_minor_breaks = "1 day",
date_labels = "%A")
p
lims <- c(powerDat$datetime[1], powerDat$datetime[length(powerDat$datetime)])
p <- powerDat %>%
ggplot(aes(x = datetime, y = Global_active_power)) +
geom_line() +
xlab("") +
scale_x_datetime(date_breaks = "days",
date_labels = "%A")
p
lims <- c(powerDat$datetime[1], powerDat$datetime[length(powerDat$datetime)])
p <- powerDat %>%
ggplot(aes(x = datetime, y = Global_active_power)) +
geom_line() +
xlab("") +
ylab("Global Active Power (kilowatts)") +
scale_x_datetime(date_breaks = "days",
date_labels = "%A")
p
ggplotly(p)
ggplotly(p) %>%
layout(line = list(width = 1))
ggplotly(p) %>%
layout(line = list(width = 0.5))
ggplotly(p) %>%
layout(line = list(width = 0.5),
xaxis = list(title = "",
nticks = 3))
?ggplotly
lims <- c(powerDat$datetime[1], powerDat$datetime[length(powerDat$datetime)])
p <- powerDat %>%
ggplot(aes(x = datetime, y = Global_active_power)) +
geom_line() +
xlab("") +
ylab("Global Active Power (kilowatts)") +
scale_x_datetime(date_breaks = "days",
date_labels = "%A")
p
ggplotly(p) %>%
layout(line = list(width = 0.5),
xaxis = list(title = "",
nticks = 3))
# Make plot 3
par(bg = "transparent")
with(powerDat, {
plot(datetime, Sub_metering_1,
type = "n",
ylab = "Energy sub metering",
xlab = "")
lines(datetime, Sub_metering_1)
lines(datetime, Sub_metering_2, col = "red")
lines(datetime, Sub_metering_3, col = "blue")
legend("topright", lty = 1, col = c("black", "red", "blue"),
legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
})
# Make plot 4
par(mfrow = c(2, 2), bg = "transparent")
with(powerDat, {
# panel 1 (top left)
plot(datetime, Global_active_power,
type = "n",
ylab = "Global Active Power",
xlab = "")
lines(datetime, Global_active_power)
# panel 2 (top right)
plot(datetime, Voltage,
type = "n",
ylab = "Voltage")
lines(datetime, Voltage)
# panel 3 (bottom left)
plot(datetime, Sub_metering_1,
type = "n",
ylab = "Energy sub metering",
xlab = "")
lines(datetime, Sub_metering_1)
lines(datetime, Sub_metering_2, col = "red")
lines(datetime, Sub_metering_3, col = "blue")
legend("topright", bty = "n", lty = 1, col = c("black", "red", "blue"),
legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
# panel 4 (bottom right)
plot(datetime, Global_reactive_power,
type = "n")
lines(datetime, Global_reactive_power)
})
